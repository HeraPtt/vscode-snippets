{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"#guard": {
		"prefix": "#guard",
		"body": [
			"#ifndef ${1:HEADER_GUARD}${2}",
			"#define ${1:HEADER_GUARD}${2}",
			"",
			"$0",
			"",
			"#endif // ${1:HEADER_GUARD}${2}"
		],
		"description": "header guard"
	},
	"Starter Template": {
		"prefix": "main",
		"body": [
			"#include <iostream>",
			"",
			"int main (int argc, char *argv[]) {",
			"\t$1",
			"",
			"\treturn 0;",
			"}"
		],
		"description": "Standard starter template for a tiny C++ program"
	},
	"cout": {
		"prefix": "sout",
		"body": [
			"std::cout << ${1:message} << std::endl;"
		],
		"description": "Code snippet for printing to std::cout, provided the header is set"
	},
	"cin": {
		"prefix": "sin",
		"body": [
			"std::in >> ${1:message};"
		],
		"description": "Code snippet for printing to std::cout, provided the header is set"
	},
	"class": {
		"prefix": "class",
		"body": [
			"class ${1:MyClass} {",
			"public:",
			"\t$1();",
			"\t$1($1 &&) = default;",
			"\t$1(const $1 &) = default;",
			"\t$1 &operator=($1 &&) = default;",
			"\t$1 &operator=(const $1 &) = default;",
			"\t~$1();",
			"",
			"private:",
			"\t$2",
			"};",
			"",
			"$1::$1() {",
			"}",
			"",
			"$1::~$1() {",
			"}"
		],
		"description": "Code snippet for class"
	},
	"classe": {
		"prefix": "classe",
		"body": [
			"class ${1:MyClass} {",
			"public:",
			"\t$2",
			"private:",
			"\t$3",
			"};",
			""
		],
		"description": "Code snippet for empty class"
	},
	"classq": {
		"prefix": "classq",
		"body": [
			"class ${1:MyClass} : public QObject {",
			"\tQ_OBJECT;",
			"public:",
			"\nexplicit $1(QObject *parent = nullptr);",
			"\t$2",
			"signals:",
			"",
			"public slots:",
			"};",
			""
		],
		"description": "Code snippet for empty Qt class"
	},
	"classi": {
		"prefix": "classi",
		"body": [
			"class ${1:MyClass} {",
			"public:",
			"\t$1() = default;",
			"\t$1($1 &&) = default;",
			"\t$1(const $1 &) = default;",
			"\t$1 &operator=($1 &&) = default;",
			"\t$1 &operator=(const $1 &) = default;",
			"\t~$1() = default;",
			"",
			"private:",
			"\t$2",
			"};"
		],
		"description": "Code snippet for class with inline constructor/destructor"
	}
}